openapi: 3.0.3
info:
  title: Polaris Extended Management Service
  version: 0.0.2
  description: |
    Extended API for Apache Polaris, including support for additional object types and management operations.
servers:
  - url: "{scheme}://{host}/api/opendic/v1"
    description: Polaris API Server
    variables:
      scheme:
        description: Protocol (http or https)
        default: https
      host:
        description: Host address
        default: localhost
security:
  - OAuth2: []

paths:
  /objects:
    get:
      tags:
        - All Udos
      operationId: listUdoTypes
      description: List all defined object types
      responses:
        200:
          description: Udo list retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Udo"
        404:
          description: Udo not found
    post:
      tags:
        - All Udos
      operationId: defineUdo
      description: Define a new user-defined object (UDO)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DefineUdoRequest"
      responses:
        201:
          description: UDO created successfully
        400:
          description: Invalid request data

  /objects/{name}:
    parameters:
      - name: name
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - Udo DDL
      operationId: listUdoObjects
      description: Retrieve a list of objects of type {name}
      responses:
        200:
          description: Udo metadata retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Udo"
        404:
          description: Udo not found

    post:
      tags:
        - Udo DDL
      operationId: createUdo
      description: Create a new Open dictionary metadata object of type {name}
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUdoRequest"
      responses:
        201:
          description: Udo created successfully
        400:
          description: Invalid request data

  /objects/{name}/platforms:
    parameters:
      - name: name
        in: path
        required: true
        schema:
          type: string

    get:
      tags:
        - Platforms Mappings
      operationId: listPlatformsForUdo
      description: List all platforms for object {name}
      responses:
        200:
          description: A list of platforms for object {name}
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PlatformMappings"

        404:
          description: Udo not found

  /objects/{name}/{platform}:
    parameters:
      - name: name
        in: path
        required: true
        schema:
          type: string
      - name: platform
        in: path
        required: true
        schema:
          type: string

    get:
      tags:
        - Platform Mappings
      operationId: getPlatformMappingForUdo
      description: GET function/snowflake -- {name:func_name, lang:language...}
      responses:
        200:
          description: The mapping from UDO with name {name} to {platform}.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlatformMapping"
        404:
          description: Udo not found or platform mapping not found for object.

    post:
      tags:
        - Platform Mappings
      operationId: createPlatformMappingForUdo
      description: POST objects/function/snowflake
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreatePlatformMappingRequest"
      responses:
        201:
          description: Platform mapping created successfully
        400:
          description: Invalid request data
        409:
          description: Platform mapping already exists for object

  /objects/{name}/{platform}/pull:
    parameters:
      - name: name
        in: path
        required: true
        schema:
          type: string
      - name: platform
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - Synchronize
      operationId: pullUdo
      description: Pull all objects of type {name} to a the request {platform} system as sql dump. GET objects/function/snowflake/pull RETURNS {statements:[CREATE OR REPLACE FUNCTION ..., ]}
      responses:
        200:
          description: A list of objects of type {name} with a platform mapping for {platform}
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PullStatements"
        404:
          description: Udo or platform mapping not found
        500:
          description: Internal error

components:
  schemas:
    Udos:
      type: object
      description: A list of object definitions
      properties:
        objects:
          type: array
          items:
            $ref: "#/components/schemas/Udo"
      required:
        - objects

    CreateUdoRequest:
      type: object
      description: Request to create a new object of an existing type.
      properties:
        object:
          $ref: "#/components/schemas/Udo"
      required:
        - object

    DefineUdoRequest:
      type: object
      description: Request to define a new object.
      properties:
        udoType:
          type: string
          description: The type of the object.
          example: Function
        properties:
          type: object
          description: The properties of the object.
          example: { language: python, args: dict, ownerId: int }
          additionalProperties:
            type: string
      required:
        - object

    PullUdoRequest:
      type: object
      description: Request to pull all UDO objects of an existing type.
      properties:
        Udos:
          $ref: "#/components/schemas/Udos"
        platformMapping:
          $ref: "#/components/schemas/PlatformMapping"

    Udo:
      type: object
      description: A user defined object containing a list of properties provided during its definition.
        To make the objects of this type usable from a platform provide a mapping from the specification provided on object definiton
        to the equivalent DDL syntax arguements expected by that platform (Use /api/opendic/v1/objects/{object}/platform)
      properties:
        type:
          type: string
          description: The type of the object.
          example: Function
        name:
          type: string
          minLength: 1
          maxLength: 256
          pattern: '^(?!\s*[s|S][y|Y][s|S][t|T][e|E][m|M]\$).*$'
          description: The name of the object
        props:
          type: object
          additionalProperties: true
        createTimestamp:
          type: integer
          format: "int64"
          description: The creation time represented as unix epoch timestamp in milliseconds
        lastUpdateTimestamp:
          type: integer
          format: "int64"
          description: The last update time represented as unix epoch timestamp in milliseconds
        entityVersion:
          type: integer
          description: The version of the catalog object used to determine if the catalog metadata has changed
      required:
        - name
        - type

    PlatformMappings:
      type: array
      items:
        $ref: "#/components/schemas/PlatformMapping"
      description: A list of supported platforms.

    PlatformMapping:
      type: object
      description: A supported platform.
      properties:
        platformName:
          example: SNOWFLAKE
          type: string
          enum:
            - SNOWFLAKE
            - SPARK
          description: The name of the platform
        objectType:
          type: string
          description: The type of the object. Examples - Function, User, Role, Policy
      required:
        - name
      discriminator:
        propertyName: platformName
        mapping:
          SNOWFLAKE: "#/components/schemas/SnowflakePlatformMapping"
          SPARK: "#/components/schemas/SparkPlatformMapping"

    SnowflakePlatformMapping:
      type: object
      description: The mapping details for the Snowflake platform.
      properties:
        jsonMapping:
          type: object
          additionalProperties: true
          example: { "todo": "actual example", "name": "function_name", "def": "as", "language": "lang" }
      required:
        - jsonMapping

    SparkPlatformMapping:
      type: object
      description: The mapping details for the Spark platform.
      properties:
        jsonMapping:
          type: object
          additionalProperties: true
          example: { "todo": "concrete example", "name": "function_name", "def": "as", "language": "lang" }
      required:
        - jsonMapping

    CreatePlatformMappingRequest:
      type: object
      description: The request body for creating a platform mapping.
      properties:
        platformMapping:
          $ref: "#/components/schemas/PlatformMapping"

    PullStatements:
      type: object
      description: A dump of SQL statements that that creates or replaces object in a specific platform.
      properties:
        statements:
          type: array
          items:
            $ref: "#/components/schemas/Statement"
      required:
        - statements

    Statement:
      type: object
      description: An SQL statement that that creates or replaces object in a specific platform
      properties:
        definition:
          type: string
      required:
        - def

# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

openapi: 3.0.3
info:
  title: OpenDict Metadata Object API
  version: 0.0.2
  description: |
    Extended API, including support for additional object types and management operations.
servers:
  - url: "{scheme}://{host}/api/opendic/v1"
    description: Polaris OpenDict API Server
    variables:
      scheme:
        description: Protocol (http or https)
        default: https
      host:
        description: Host address
        default: localhost
security:
  - OAuth2: [ ]

paths:
  /objects:
    get:
      tags:
        - All Udos
      operationId: listUdoTypes
      description: List all defined object types
      responses:
        200:
          description: Udo list retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UdoSchema"
        404:
          description: No udo's found
    post:
      tags:
        - All Udos
      operationId: defineUdo
      description: Define a new user-defined object (UDO)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DefineUdoRequest"
      responses:
        201:
          description: UDO created successfully
        400:
          description: Invalid request data

  /objects/{name}:
    parameters:
      - name: name
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - Udo DDL
      operationId: listUdoObjects
      description: Retrieve a list of objects of type {name}
      responses:
        200:
          description: Udo metadata retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Udo"
        404:
          description: Udo not found

    post:
      tags:
        - Udo DDL
      operationId: createUdo
      description: Create a new Open dictionary metadata object of type {name}
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUdoRequest"
      responses:
        201:
          description: Udo created successfully
        400:
          description: Invalid request data.

    delete:
      tags:
        - Udo DDL
      operationId: deleteUdo
      description: Drop all objects of type {name}
      responses:
        200:
          description: Udo deleted successfully
        404:
          description: Udo not found

  /objects/{name}/{objectUname}:
    parameters:
      - name: name
        in: path
        required: true
        schema:
          type: string
      - name: objectUname
        in: path
        required: true
        schema:
          type: string

    put:
      tags:
        - Udo DDL
      operationId: updateUdo
      description: Update an existing Open dictionary metadata object of type {name}
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUdoRequest"
      responses:
        200:
          description: Udo updated successfully
        400:
          description: Invalid request data
        404:
          description: Udo not found

  /objects/{name}/platforms:
    parameters:
      - name: name
        in: path
        required: true
        schema:
          type: string

    get:
      tags:
        - Platforms Mappings
      operationId: listPlatformsForUdo
      description: List all platforms for object {name}
      responses:
        200:
          description: A list of platforms for object {name}
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PlatformMapping"

        404:
          description: Udo not found

  /objects/{name}/platforms/{platform}:
    parameters:
      - name: name
        in: path
        required: true
        schema:
          type: string
      - name: platform
        in: path
        required: true
        schema:
          type: string

    get:
      tags:
        - Platform Mappings
      operationId: getPlatformMappingForUdo
      description: GET function/snowflake -- {name:func_name, lang:language...}
      responses:
        200:
          description: The mapping from UDO with name {name} to {platform}.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlatformMapping"
        404:
          description: Udo not found or platform mapping not found for object.

    post:
      tags:
        - Platform Mappings
      operationId: createPlatformMappingForUdo
      description: POST objects/function/snowflake
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreatePlatformMappingRequest"
      responses:
        201:
          description: Platform mapping created successfully
        400:
          description: Invalid request data
        409:
          description: Platform mapping already exists for object

  /objects/{name}/platforms/{platform}/pull:
    parameters:
      - name: name
        in: path
        required: true
        schema:
          type: string
      - name: platform
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - Synchronize
      operationId: pullUdo
      description: Pull all objects of type {name} to a the request {platform} system as sql dump. GET objects/function/snowflake/pull RETURNS {statements:[CREATE OR REPLACE FUNCTION ..., ]}
      responses:
        200:
          description: A list of objects of type {name} with a platform mapping for {platform}
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Statement"
        404:
          description: Udo or platform mapping not found
        500:
          description: Internal error

  /platforms:
    get:
      tags:
        - Platform Mappings
      operationId: listPlatforms
      description: List all platforms with mappings
      responses:
        200:
          description: A list of all registered platforms
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PlatformMappings"
        404:
          description: No platform mappings found

  /platforms/{platform}:
    parameters:
      - name: platform
        in: path
        required: true
        schema:
          type: string

    get:
      tags:
        - Platform Mappings
      operationId: listMappingsForPlatform
      description: GET platforms/snowflake
      responses:
        200:
          description: All the mappings registered for the snowflame platform.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PlatformMapping"

        404:
          description: Platform mapping not found for object.

    delete:
      tags:
        - Platform Mappings
      operationId: deleteMappingsForPlatform
      description: DELETE platforms/snowflake
      responses:
        200:
          description: Mappings for platform deleted successfully
        404:
          description: Platform not found not found for object.

components:

  securitySchemes:
    OAuth2:
      type: oauth2
      description: Uses OAuth 2 with client credentials flow
      flows:
        implicit:
          authorizationUrl: "{scheme}://{host}/api/v1/oauth/tokens"
          scopes: { }

  schemas:
    DefineUdoRequest:
      type: object
      description: Request to define a new object.
      properties:
        udoType:
          type: string
          description: The type of the object.
          example: Function
        properties:
          type: object
          description: The properties of the object.
          example: { language: string, args: dict, ownerId: int }
          additionalProperties:
            type: string
      required:
        - udoType

    UdoSchema:
      type: object
      description: The schema of the object.
      properties:
        udoType:
          type: string
          description: The type of the object.
          example: Function
        properties:
          type: object
          description: The schema of the object.
          example: { language: string, args: dict, ownerId: int }
          additionalProperties:
            type: string
        createdTimestamp:
          type: string
          description: The creation time represented as unix epoch timestamp in milliseconds
        lastUpdatedTimestamp:
          type: string
          description: The last update time represented as unix epoch timestamp in milliseconds
        version:
          type: integer
          description: The version of the opendict spec when the object was retrieved
      required:
        - udoType
        - properties

    CreateUdoRequest:
      type: object
      description: Request to create a new object of an existing type.
      properties:
        udo:
          $ref: "#/components/schemas/Udo"
      required:
        - udo


    Udo:
      type: object
      description: A user defined object containing a list of properties provided during its definition.
        To make the objects of this type usable from a platform provide a mapping from the specification provided on object definiton
        to the equivalent DDL syntax arguements expected by that platform (Use /api/opendic/v1/objects/{object}/platform)
      properties:
        type:
          type: string
          description: The type of the object.
          example: Function
        name:
          type: string
          minLength: 1
          maxLength: 256
          pattern: '^(?!\s*[s|S][y|Y][s|S][t|T][e|E][m|M]\$).*$'
          description: The name of the object
        props:
          type: object
          additionalProperties: { type: object }
        createdTimestamp:
          type: string
          description: The creation time as parseable OffsetDateTime string.
        lastUpdatedTimestamp:
          type: string
          description: The last update time as parseable OffsetDateTime string.
        entityVersion:
          type: integer
          description: The version of the catalog object used to determine if the catalog metadata has changed
      required:
        - name
        - type

    PlatformMappings:
      type: object
      description: ...
      properties:
        platformName:
          type: string
          description: ...
          example: snowflake
        platformMappings:
          type: array
          description: all mappings for the platform
          items:
            $ref: "#/components/schemas/PlatformMapping"

    PlatformMapping:
      type: object
      description: A supported platform mapping.
      properties:
        typeName:
          type: string
          description: The type of the object. Examples - Function, User, Role, Policy
          example: Function
        platformName:
          example: SNOWFLAKE
          type: string
          description: The name of the platform
        syntax:
          type: string
          description: The syntax of the object in the platform.
          example: |
            CREATE OR ALTER <type> <name>(<args>)
                RETURNS <return_type>
                LANGUAGE <language>
                RUNTIME = <runtime>
                PACKAGES = (<packages>)
                HANDLER = '<function_name>'
            AS $$
            <def>
            $$
        objectDumpMap:
          type: object
          description: An optional mapping of the object properties to the platform-specific syntax.
          example: |
            {
              "args": { "type": "map", "format": "<key> <value>", "delimiter": ", " },
              "packages": { "type": "list", "format": "'<item>'", "delimiter": ", " }
            }
          additionalProperties:
            type: object
            description: Mapping configuration for a property
            properties:
              propType:
                type: string
                description: The type of the property.
                example: map
              format:
                type: string
                description: The format of the property.
                example: "<key> <value>"
              delimiter:
                type: string
                description: The delimiter used in the property.
                example: ", "
            required:
              - propType
              - format
              - delimiter
        createdTimestamp:
          type: string
          description: The creation time as parseable OffsetDateTime string.
        lastUpdatedTimestamp:
          type: string
          description: The last update time as parseable OffsetDateTime string.
        version:
          type: integer
          description: The version of the mapping.
      required:
        - typeName
        - platformName
        - syntax

    CreatePlatformMappingRequest:
      type: object
      description: The request body for creating a platform mapping.
      properties:
        platformMapping:
          $ref: "#/components/schemas/PlatformMapping"
      required:
        - platformMapping

    Statement:
      type: object
      description: An SQL statement that that creates or replaces object in a specific platform
      properties:
        definition:
          type: string
      required:
        - def
